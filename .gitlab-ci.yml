# GitLab CI/CD Configuration for NeoMovies Mobile
# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–±–æ—Ä–∫–∞ APK –∏ TorrentEngine –º–æ–¥—É–ª—è

stages:
  - build
  - test
  - deploy

variables:
  # Flutter –≤–µ—Ä—Å–∏—è
  FLUTTER_VERSION: "3.35.5"
  # Flutter –ø—É—Ç—å –¥–ª—è CI
  FLUTTER_ROOT: "/opt/flutter"
  # Android SDK (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø—É—Ç—å –≤ mingc/android-build-box)
  ANDROID_SDK_ROOT: "/opt/android-sdk"
  ANDROID_HOME: "/opt/android-sdk"
  # Gradle –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è CI (–º–µ–Ω—å—à–µ RAM)
  GRADLE_OPTS: "-Dorg.gradle.daemon=false -Dorg.gradle.jvmargs='-Xmx1536m -XX:MaxMetaspaceSize=512m' -Dorg.gradle.parallel=true -Dorg.gradle.caching=true"
  # –ö—ç—à
  GRADLE_USER_HOME: "${CI_PROJECT_DIR}/.gradle"
  PUB_CACHE: "${CI_PROJECT_DIR}/.pub-cache"

# –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è —Å–±–æ—Ä–∫–∏
cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - .gradle/
    - .pub-cache/
    - android/.gradle/
    - android/build/
    - build/

# ============================================
# –°–±–æ—Ä–∫–∞ —Ç–æ–ª—å–∫–æ TorrentEngine –º–æ–¥—É–ª—è
# ============================================
build:torrent-engine:
  stage: build
  image: mingc/android-build-box:latest
  tags:
    - saas-linux-medium-amd64  # GitLab Instance Runner (4GB RAM, 2 cores)
  before_script:
    - echo "Detecting Android SDK location..."
    - export ANDROID_SDK_ROOT=${ANDROID_SDK_ROOT:-${ANDROID_HOME:-/opt/android-sdk}}
    - echo "Android SDK: ${ANDROID_SDK_ROOT}"
    - echo "Creating local.properties for Flutter..."
    - echo "flutter.sdk=${FLUTTER_ROOT}" > android/local.properties
    - echo "sdk.dir=${ANDROID_SDK_ROOT}" >> android/local.properties
    - cat android/local.properties
  script:
    - echo "Building TorrentEngine library module..."
    - cd android
    # –°–æ–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ –º–æ–¥—É–ª—å torrentengine
    - ./gradlew :torrentengine:assembleRelease --no-daemon --parallel --build-cache
    - ls -lah torrentengine/build/outputs/aar/
  artifacts:
    name: "torrentengine-${CI_COMMIT_SHORT_SHA}"
    paths:
      - android/torrentengine/build/outputs/aar/*.aar
    expire_in: 1 week
  only:
    - dev
    - feature/torrent-engine-integration
    - merge_requests
  when: on_success

# ============================================
# –°–±–æ—Ä–∫–∞ Debug APK
# ============================================
build:apk-debug:
  stage: build
  image: mingc/android-build-box:latest
  tags:
    - docker
  before_script:
    - echo "Installing Flutter ${FLUTTER_VERSION}..."
    - git clone --depth 1 --branch ${FLUTTER_VERSION} https://github.com/flutter/flutter.git /opt/flutter
    - export PATH="/opt/flutter/bin:$PATH"
    - flutter --version
    - flutter doctor -v
    - flutter pub get
  script:
    - echo "Building Debug APK..."
    - flutter build apk --debug --target-platform android-arm64
    - ls -lah build/app/outputs/flutter-apk/
  artifacts:
    name: "neomovies-debug-${CI_COMMIT_SHORT_SHA}"
    paths:
      - build/app/outputs/flutter-apk/app-debug.apk
    expire_in: 1 week
  only:
    - dev
    - feature/torrent-engine-integration
    - merge_requests
  when: on_success
  allow_failure: true

# ============================================
# –°–±–æ—Ä–∫–∞ Release APK (—Ç–æ–ª—å–∫–æ –¥–ª—è dev)
# ============================================
build:apk-release:
  stage: build
  image: mingc/android-build-box:latest
  tags:
    - docker
  before_script:
    - echo "Installing Flutter ${FLUTTER_VERSION}..."
    - git clone --depth 1 --branch ${FLUTTER_VERSION} https://github.com/flutter/flutter.git /opt/flutter
    - export PATH="/opt/flutter/bin:$PATH"
    - flutter --version
    - flutter doctor -v
    - flutter pub get
  script:
    - echo "Building Release APK..."
    # –°–±–æ—Ä–∫–∞ —Å split-per-abi –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞
    - flutter build apk --release --split-per-abi --target-platform android-arm64
    - ls -lah build/app/outputs/flutter-apk/
  artifacts:
    name: "neomovies-release-${CI_COMMIT_SHORT_SHA}"
    paths:
      - build/app/outputs/flutter-apk/app-arm64-v8a-release.apk
    expire_in: 30 days
  only:
    - dev
  when: on_success
  allow_failure: true

# ============================================
# –ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞ Flutter
# ============================================
test:flutter-analyze:
  stage: test
  image: mingc/android-build-box:latest
  tags:
    - docker
  before_script:
    - git clone --depth 1 --branch ${FLUTTER_VERSION} https://github.com/flutter/flutter.git /opt/flutter
    - export PATH="/opt/flutter/bin:$PATH"
    - flutter pub get
  script:
    - echo "Running Flutter analyze..."
    - flutter analyze --no-fatal-infos || true
  only:
    - dev
    - merge_requests
  allow_failure: true

# ============================================
# Kotlin/Android lint
# ============================================
test:android-lint:
  stage: test
  image: mingc/android-build-box:latest
  tags:
    - docker
  before_script:
    - echo "Creating local.properties for Flutter..."
    - echo "flutter.sdk=${FLUTTER_ROOT}" > android/local.properties
    - echo "sdk.dir=${ANDROID_SDK_ROOT}" >> android/local.properties
  script:
    - echo "Running Android Lint..."
    - cd android
    - ./gradlew lint --no-daemon || true
  artifacts:
    name: "lint-reports-${CI_COMMIT_SHORT_SHA}"
    paths:
      - android/app/build/reports/lint-results*.html
      - android/torrentengine/build/reports/lint-results*.html
    expire_in: 1 week
  only:
    - dev
    - merge_requests
  allow_failure: true

# ============================================
# Deploy –∫ —Ä–µ–ª–∏–∑–∞–º (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
# ============================================
deploy:release:
  stage: deploy
  image: alpine:latest
  tags:
    - docker
  before_script:
    - apk add --no-cache curl jq
  script:
    - echo "Creating GitLab Release..."
    - |
      if [ -f "build/app/outputs/flutter-apk/app-arm64-v8a-release.apk" ]; then
        echo "Release APK found"
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏—é –≤ GitLab Releases –∏–ª–∏ –¥—Ä—É–≥–æ–π deployment
      fi
  only:
    - tags
  when: manual

# ============================================
# –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π —Å–±–æ—Ä–∫–µ
# ============================================
.notify_success:
  after_script:
    - echo "‚úÖ Build completed successfully!"
    - echo "üì¶ Artifacts are available in the pipeline artifacts"
    - echo "üîó Download URL: ${CI_JOB_URL}/artifacts/download"
