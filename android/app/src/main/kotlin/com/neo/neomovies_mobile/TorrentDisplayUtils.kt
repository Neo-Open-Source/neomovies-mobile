package com.neo.neomovies_mobile

import android.util.Log
import kotlin.math.log
import kotlin.math.pow

object TorrentDisplayUtils {

    private const val TAG = "TorrentDisplay"

    /**
     * –í—ã–≤–æ–¥–∏—Ç –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ—Ä—Ä–µ–Ω—Ç–µ –≤ –ª–æ–≥
     */
    fun logTorrentInfo(metadata: TorrentMetadata) {
        Log.d(TAG, "=== –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –¢–û–†–†–ï–ù–¢–ï ===")
        Log.d(TAG, "–ù–∞–∑–≤–∞–Ω–∏–µ: ${metadata.name}")
        Log.d(TAG, "–•—ç—à: ${metadata.infoHash}")
        Log.d(TAG, "–†–∞–∑–º–µ—Ä: ${formatFileSize(metadata.totalSize)}")
        Log.d(TAG, "–§–∞–π–ª–æ–≤: ${metadata.fileStructure.totalFiles}")
        Log.d(TAG, "–ß–∞—Å—Ç–µ–π: ${metadata.numPieces}")
        Log.d(TAG, "–†–∞–∑–º–µ—Ä —á–∞—Å—Ç–∏: ${formatFileSize(metadata.pieceLength.toLong())}")
        Log.d(TAG, "–¢—Ä–µ–∫–µ—Ä–æ–≤: ${metadata.trackers.size}")
        
        if (metadata.comment.isNotEmpty()) {
            Log.d(TAG, "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${metadata.comment}")
        }
        if (metadata.createdBy.isNotEmpty()) {
            Log.d(TAG, "–°–æ–∑–¥–∞–Ω–æ: ${metadata.createdBy}")
        }
        if (metadata.creationDate > 0) {
            Log.d(TAG, "–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: ${java.util.Date(metadata.creationDate * 1000)}")
        }
        
        Log.d(TAG, "")
        logFileTypeStats(metadata.fileStructure)
        Log.d(TAG, "")
        logFileStructure(metadata.fileStructure)
        Log.d(TAG, "")
        logTrackerList(metadata.trackers)
    }

    /**
     * –í—ã–≤–æ–¥–∏—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ñ–∞–π–ª–æ–≤ –≤ –≤–∏–¥–µ –¥–µ—Ä–µ–≤–∞
     */
    fun logFileStructure(fileStructure: FileStructure) {
        Log.d(TAG, "=== –°–¢–†–£–ö–¢–£–†–ê –§–ê–ô–õ–û–í ===")
        logDirectoryNode(fileStructure.rootDirectory, "")
    }

    /**
     * –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –≤—ã–≤–æ–¥–∏—Ç —É–∑–µ–ª –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
     */
    private fun logDirectoryNode(node: DirectoryNode, prefix: String) {
        if (node.name.isNotEmpty()) {
            Log.d(TAG, "$prefix${node.name}/")
        }
        
        val childPrefix = if (node.name.isEmpty()) prefix else "$prefix  "
        
        // –í—ã–≤–æ–¥–∏–º –ø–æ–¥–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        node.subdirectories.forEach { subDir ->
            Log.d(TAG, "$childPrefix‚îú‚îÄ‚îÄ ${subDir.name}/")
            logDirectoryNode(subDir, "$childPrefix‚îÇ   ")
        }
        
        // –í—ã–≤–æ–¥–∏–º —Ñ–∞–π–ª—ã
        node.files.forEachIndexed { index, file ->
            val isLast = index == node.files.size - 1 && node.subdirectories.isEmpty()
            val symbol = if (isLast) "‚îî‚îÄ‚îÄ" else "‚îú‚îÄ‚îÄ"
            val fileInfo = "${file.name} (${formatFileSize(file.size)}) [${file.extension.uppercase()}]"
            Log.d(TAG, "$childPrefix$symbol $fileInfo")
        }
    }

    /**
     * –í—ã–≤–æ–¥–∏—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ç–∏–ø–∞–º —Ñ–∞–π–ª–æ–≤
     */
    fun logFileTypeStats(fileStructure: FileStructure) {
        Log.d(TAG, "=== –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –¢–ò–ü–ê–ú –§–ê–ô–õ–û–í ===")
        if (fileStructure.filesByType.isEmpty()) {
            Log.d(TAG, "–ù–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —Ç–∏–ø–∞–º —Ñ–∞–π–ª–æ–≤")
            return
        }
        fileStructure.filesByType.forEach { (type, count) ->
            val percentage = (count.toFloat() / fileStructure.totalFiles * 100).toInt()
            Log.d(TAG, "${type.uppercase()}: $count —Ñ–∞–π–ª–æ–≤ ($percentage%)")
        }
    }

    /**
     * Alias for MainActivity ‚Äì just logs structure.
     */
    fun logTorrentStructure(metadata: TorrentMetadata) {
        logFileStructure(metadata.fileStructure)
    }

    /**
     * –í—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ —Ç—Ä–µ–∫–µ—Ä–æ–≤
     */
    fun logTrackerList(trackers: List<String>) {
        if (trackers.isEmpty()) {
            Log.d(TAG, "=== –¢–†–ï–ö–ï–†–´ === (–Ω–µ—Ç —Ç—Ä–µ–∫–µ—Ä–æ–≤)")
            return
        }
        
        Log.d(TAG, "=== –¢–†–ï–ö–ï–†–´ ===")
        trackers.forEachIndexed { index, tracker ->
            Log.d(TAG, "${index + 1}. $tracker")
        }
    }

    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ñ–∞–π–ª–æ–≤
     */
    fun getFileStructureText(fileStructure: FileStructure): String {
        val sb = StringBuilder()
        sb.appendLine("${fileStructure.rootDirectory.name}/")
        appendDirectoryNode(fileStructure.rootDirectory, "", sb)
        return sb.toString()
    }

    /**
     * –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –¥–æ–±–∞–≤–ª—è–µ—Ç —É–∑–µ–ª –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –≤ StringBuilder
     */
    private fun appendDirectoryNode(node: DirectoryNode, prefix: String, sb: StringBuilder) {
        val childPrefix = if (node.name.isEmpty()) prefix else "$prefix  "
        
        // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        node.subdirectories.forEach { subDir ->
            sb.appendLine("$childPrefix‚îî‚îÄ‚îÄ ${subDir.name}/")
            appendDirectoryNode(subDir, "$childPrefix    ", sb)
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã
        node.files.forEachIndexed { index, file ->
            val isLast = index == node.files.size - 1 && node.subdirectories.isEmpty()
            val symbol = if (isLast) "‚îî‚îÄ‚îÄ" else "‚îú‚îÄ‚îÄ"
            val fileInfo = "${file.name} (${formatFileSize(file.size)})"
            sb.appendLine("$childPrefix$symbol $fileInfo")
        }
    }

    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫—Ä–∞—Ç–∫—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ —Ç–æ—Ä—Ä–µ–Ω—Ç–µ
     */
    fun getTorrentSummary(metadata: TorrentMetadata): String {
        return buildString {
            appendLine("–ù–∞–∑–≤–∞–Ω–∏–µ: ${metadata.name}")
            appendLine("–†–∞–∑–º–µ—Ä: ${formatFileSize(metadata.totalSize)}")
            appendLine("–§–∞–π–ª–æ–≤: ${metadata.fileStructure.totalFiles}")
            appendLine("–•—ç—à: ${metadata.infoHash}")
            
            if (metadata.fileStructure.filesByType.isNotEmpty()) {
                appendLine("\n–¢–∏–ø—ã —Ñ–∞–π–ª–æ–≤:")
                metadata.fileStructure.filesByType.forEach { (type, count) ->
                    val percentage = (count.toFloat() / metadata.fileStructure.totalFiles * 100).toInt()
                    appendLine("  ${type.uppercase()}: $count ($percentage%)")
                }
            }
        }
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥
     */
    fun formatFileSize(bytes: Long): String {
        if (bytes <= 0) return "0 B"
        val units = arrayOf("B", "KB", "MB", "GB", "TB")
        val digitGroups = (log(bytes.toDouble(), 1024.0)).toInt()
        return "%.1f %s".format(
            bytes / 1024.0.pow(digitGroups),
            units[digitGroups.coerceAtMost(units.lastIndex)]
        )
    }

    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–∫–æ–Ω–∫—É –¥–ª—è —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞
     */
    fun getFileTypeIcon(extension: String): String {
        return when {
            extension in setOf("mp4", "mkv", "avi", "mov", "wmv", "flv", "webm", "m4v", "3gp") -> "üé¨"
            extension in setOf("mp3", "flac", "wav", "aac", "ogg", "wma", "m4a", "opus") -> "üéµ"
            extension in setOf("jpg", "jpeg", "png", "gif", "bmp", "webp", "svg") -> "üñºÔ∏è"
            extension in setOf("pdf", "doc", "docx", "txt", "rtf", "odt") -> "üìÑ"
            extension in setOf("zip", "rar", "7z", "tar", "gz", "bz2") -> "üì¶"
            else -> "üìÅ"
        }
    }

    /**
     * –§–∏–ª—å—Ç—Ä—É–µ—Ç —Ñ–∞–π–ª—ã –ø–æ —Ç–∏–ø—É
     */
    fun filterFilesByType(files: List<FileInfo>, type: String): List<FileInfo> {
        return when (type.lowercase()) {
            "video" -> files.filter { it.isVideo }
            "audio" -> files.filter { it.isAudio }
            "image" -> files.filter { it.isImage }
            "document" -> files.filter { it.isDocument }
            "archive" -> files.filter { it.isArchive }
            else -> files
        }
    }
}